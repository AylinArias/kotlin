package test

public open class Basic_DisabledImprovementsAndReading</*0*/ T : kotlin.Any!> {
    public/*package*/ constructor Basic_DisabledImprovementsAndReading</*0*/ T : kotlin.Any!>(/*0*/ p0: test.Basic_DisabledImprovementsAndReading.G<kotlin.String!>!)

    public/*package*/ open class A {
        public/*package*/ constructor A()

        public/*package*/ open inner class B</*0*/ A : kotlin.Any!, /*1*/ B : kotlin.Any!> {
            public/*package*/ constructor B</*0*/ A : kotlin.Any!, /*1*/ B : kotlin.Any!>()
        }
    }

    public/*package*/ interface G</*0*/ T : kotlin.Any!> : test.Basic_DisabledImprovementsAndReading.G2<T!, kotlin.String!> {
    }

    public/*package*/ interface G2</*0*/ A : kotlin.Any!, /*1*/ B : kotlin.Any!> {
    }

    public interface MyClass</*0*/ TT : kotlin.Any!> {
        public abstract fun f1(/*0*/ p0: test.Basic_DisabledImprovementsAndReading.G<kotlin.String!>!): kotlin.Unit
        public abstract fun </*0*/ T : kotlin.Any!, /*1*/ K : test.Basic_DisabledImprovementsAndReading.G<kotlin.Array<(out) kotlin.String!>!>!> f10(/*0*/ p0: T!): kotlin.Unit
        public abstract fun f2(): test.Basic_DisabledImprovementsAndReading.G2<kotlin.String!, kotlin.Int!>!
        public abstract fun </*0*/ T : kotlin.Any!> f3(/*0*/ @org.jetbrains.annotations.NotNull p0: @org.jetbrains.annotations.NotNull T): kotlin.Unit
        public abstract fun f4(/*0*/ p0: test.Basic_DisabledImprovementsAndReading.G<kotlin.Array<(out) kotlin.String!>!>!): kotlin.Unit
        public abstract fun f5(/*0*/ p0: test.Basic_DisabledImprovementsAndReading.G<*>!): kotlin.Unit
        public abstract fun f6(/*0*/ p0: test.Basic_DisabledImprovementsAndReading.G<out kotlin.Any!>!): kotlin.Unit
        public abstract fun f7(/*0*/ p0: test.Basic_DisabledImprovementsAndReading.G<test.Basic_DisabledImprovementsAndReading.A.B<*, *>!>!): kotlin.Unit
        public abstract fun f81(): test.Basic_DisabledImprovementsAndReading.G<test.Basic_DisabledImprovementsAndReading.A.B<*, *>!>!
        public abstract fun f9(): test.Basic_DisabledImprovementsAndReading.G<test.Basic_DisabledImprovementsAndReading.A.B<*, *>!>!
    }
}
