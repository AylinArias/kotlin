package test

public open class Basic</*0*/ T : @org.jetbrains.annotations.NotNull kotlin.Any> {
    public/*package*/ constructor Basic</*0*/ T : @org.jetbrains.annotations.NotNull kotlin.Any>(/*0*/ p: test.Basic.G<@org.jetbrains.annotations.NotNull kotlin.String>!)

    public/*package*/ open class A {
        public/*package*/ constructor A()

        public/*package*/ open inner class B</*0*/ A : kotlin.Any!, /*1*/ B : kotlin.Any!> {
            public/*package*/ constructor B</*0*/ A : kotlin.Any!, /*1*/ B : kotlin.Any!>()
        }
    }

    public/*package*/ interface G</*0*/ T : kotlin.Any!> : test.Basic.G2<@org.jetbrains.annotations.NotNull T, @org.jetbrains.annotations.NotNull kotlin.String> {
    }

    public/*package*/ interface G2</*0*/ A : kotlin.Any!, /*1*/ B : kotlin.Any!> {
    }

    public interface MyClass</*0*/ TT : kotlin.Any!> {
        public abstract fun f1(/*0*/ p: test.Basic.G<@org.jetbrains.annotations.NotNull kotlin.String>!): kotlin.Unit
        public abstract fun </*0*/ T : @org.jetbrains.annotations.NotNull kotlin.Any, /*1*/ K : test.Basic.G<kotlin.Array<(out) @org.jetbrains.annotations.NotNull kotlin.String>!>!> f10(/*0*/ p: T): kotlin.Unit
        public abstract fun f2(): test.Basic.G2<@org.jetbrains.annotations.Nullable kotlin.String?, @org.jetbrains.annotations.NotNull kotlin.Int>!
        public abstract fun </*0*/ T : @org.jetbrains.annotations.NotNull kotlin.Any> f3(/*0*/ @org.jetbrains.annotations.NotNull x: @org.jetbrains.annotations.NotNull T): kotlin.Unit
        public abstract fun f4(/*0*/ p: test.Basic.G<(@org.jetbrains.annotations.Nullable kotlin.Array<@org.jetbrains.annotations.NotNull kotlin.String>?..@org.jetbrains.annotations.Nullable kotlin.Array<out @org.jetbrains.annotations.NotNull kotlin.String>?)>!): kotlin.Unit
        public abstract fun f5(/*0*/ p: test.Basic.G<*>!): kotlin.Unit
        public abstract fun f6(/*0*/ p: test.Basic.G<out @org.jetbrains.annotations.Nullable kotlin.Any?>!): kotlin.Unit
        public abstract fun f7(/*0*/ p: test.Basic.G<@org.jetbrains.annotations.NotNull test.Basic.A.B<*, *>>!): kotlin.Unit
        public abstract fun f8(): test.Basic.G<test.Basic.A.B<*, *>!>!
        public abstract fun f9(): test.Basic.G<@org.jetbrains.annotations.Nullable test.Basic.A.B<*, *>?>!
    }
}
